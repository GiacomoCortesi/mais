from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.job_config import JobConfig
from openapi_server import util

from openapi_server.models.job_config import JobConfig  # noqa: E501

class JobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filename=None, config=None):  # noqa: E501
        """JobRequest - a model defined in OpenAPI

        :param filename: The filename of this JobRequest.  # noqa: E501
        :type filename: str
        :param config: The config of this JobRequest.  # noqa: E501
        :type config: JobConfig
        """
        self.openapi_types = {
            'filename': str,
            'config': JobConfig
        }

        self.attribute_map = {
            'filename': 'filename',
            'config': 'config'
        }

        self._filename = filename
        self._config = config

    @classmethod
    def from_dict(cls, dikt) -> 'JobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobRequest of this JobRequest.  # noqa: E501
        :rtype: JobRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filename(self) -> str:
        """Gets the filename of this JobRequest.


        :return: The filename of this JobRequest.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename: str):
        """Sets the filename of this JobRequest.


        :param filename: The filename of this JobRequest.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def config(self) -> JobConfig:
        """Gets the config of this JobRequest.


        :return: The config of this JobRequest.
        :rtype: JobConfig
        """
        return self._config

    @config.setter
    def config(self, config: JobConfig):
        """Sets the config of this JobRequest.


        :param config: The config of this JobRequest.
        :type config: JobConfig
        """

        self._config = config

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Word(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, word=None, start=None, end=None, score=None):  # noqa: E501
        """Word - a model defined in OpenAPI

        :param word: The word of this Word.  # noqa: E501
        :type word: str
        :param start: The start of this Word.  # noqa: E501
        :type start: float
        :param end: The end of this Word.  # noqa: E501
        :type end: float
        :param score: The score of this Word.  # noqa: E501
        :type score: float
        """
        self.openapi_types = {
            'word': str,
            'start': float,
            'end': float,
            'score': float
        }

        self.attribute_map = {
            'word': 'word',
            'start': 'start',
            'end': 'end',
            'score': 'score'
        }

        self._word = word
        self._start = start
        self._end = end
        self._score = score

    @classmethod
    def from_dict(cls, dikt) -> 'Word':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Word of this Word.  # noqa: E501
        :rtype: Word
        """
        return util.deserialize_model(dikt, cls)

    @property
    def word(self) -> str:
        """Gets the word of this Word.


        :return: The word of this Word.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word: str):
        """Sets the word of this Word.


        :param word: The word of this Word.
        :type word: str
        """
        if word is None:
            raise ValueError("Invalid value for `word`, must not be `None`")  # noqa: E501

        self._word = word

    @property
    def start(self) -> float:
        """Gets the start of this Word.


        :return: The start of this Word.
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start: float):
        """Sets the start of this Word.


        :param start: The start of this Word.
        :type start: float
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self) -> float:
        """Gets the end of this Word.


        :return: The end of this Word.
        :rtype: float
        """
        return self._end

    @end.setter
    def end(self, end: float):
        """Sets the end of this Word.


        :param end: The end of this Word.
        :type end: float
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def score(self) -> float:
        """Gets the score of this Word.


        :return: The score of this Word.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score: float):
        """Sets the score of this Word.


        :param score: The score of this Word.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class JobParamsModelSize(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, values=None, description=None):  # noqa: E501
        """JobParamsModelSize - a model defined in OpenAPI

        :param values: The values of this JobParamsModelSize.  # noqa: E501
        :type values: List[str]
        :param description: The description of this JobParamsModelSize.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'values': List[str],
            'description': str
        }

        self.attribute_map = {
            'values': 'values',
            'description': 'description'
        }

        self._values = values
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'JobParamsModelSize':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobParams_model_size of this JobParamsModelSize.  # noqa: E501
        :rtype: JobParamsModelSize
        """
        return util.deserialize_model(dikt, cls)

    @property
    def values(self) -> List[str]:
        """Gets the values of this JobParamsModelSize.


        :return: The values of this JobParamsModelSize.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values: List[str]):
        """Sets the values of this JobParamsModelSize.


        :param values: The values of this JobParamsModelSize.
        :type values: List[str]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    @property
    def description(self) -> str:
        """Gets the description of this JobParamsModelSize.


        :return: The description of this JobParamsModelSize.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this JobParamsModelSize.


        :param description: The description of this JobParamsModelSize.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

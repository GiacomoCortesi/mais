from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.job_info import JobInfo
from openapi_server.models.transcription_data import TranscriptionData
from openapi_server import util

from openapi_server.models.job_info import JobInfo  # noqa: E501
from openapi_server.models.transcription_data import TranscriptionData  # noqa: E501

class JobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id=None, config=None, status=None, data=None):  # noqa: E501
        """JobResponse - a model defined in OpenAPI

        :param job_id: The job_id of this JobResponse.  # noqa: E501
        :type job_id: str
        :param config: The config of this JobResponse.  # noqa: E501
        :type config: JobInfo
        :param status: The status of this JobResponse.  # noqa: E501
        :type status: str
        :param data: The data of this JobResponse.  # noqa: E501
        :type data: TranscriptionData
        """
        self.openapi_types = {
            'job_id': str,
            'config': JobInfo,
            'status': str,
            'data': TranscriptionData
        }

        self.attribute_map = {
            'job_id': 'job_id',
            'config': 'config',
            'status': 'status',
            'data': 'data'
        }

        self._job_id = job_id
        self._config = config
        self._status = status
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'JobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobResponse of this JobResponse.  # noqa: E501
        :rtype: JobResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self) -> str:
        """Gets the job_id of this JobResponse.


        :return: The job_id of this JobResponse.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this JobResponse.


        :param job_id: The job_id of this JobResponse.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def config(self) -> JobInfo:
        """Gets the config of this JobResponse.


        :return: The config of this JobResponse.
        :rtype: JobInfo
        """
        return self._config

    @config.setter
    def config(self, config: JobInfo):
        """Sets the config of this JobResponse.


        :param config: The config of this JobResponse.
        :type config: JobInfo
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def status(self) -> str:
        """Gets the status of this JobResponse.


        :return: The status of this JobResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this JobResponse.


        :param status: The status of this JobResponse.
        :type status: str
        """
        allowed_values = ["pending", "running", "completed", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def data(self) -> TranscriptionData:
        """Gets the data of this JobResponse.


        :return: The data of this JobResponse.
        :rtype: TranscriptionData
        """
        return self._data

    @data.setter
    def data(self, data: TranscriptionData):
        """Sets the data of this JobResponse.


        :param data: The data of this JobResponse.
        :type data: TranscriptionData
        """

        self._data = data

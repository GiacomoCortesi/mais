from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.job_info import JobInfo
from openapi_server.models.transcription_data import TranscriptionData
from openapi_server import util

from openapi_server.models.job_info import JobInfo  # noqa: E501
from openapi_server.models.transcription_data import TranscriptionData  # noqa: E501

class JobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, info=None, status=None, data=None):  # noqa: E501
        """JobResponse - a model defined in OpenAPI

        :param id: The id of this JobResponse.  # noqa: E501
        :type id: str
        :param info: The info of this JobResponse.  # noqa: E501
        :type info: JobInfo
        :param status: The status of this JobResponse.  # noqa: E501
        :type status: str
        :param data: The data of this JobResponse.  # noqa: E501
        :type data: TranscriptionData
        """
        self.openapi_types = {
            'id': str,
            'info': JobInfo,
            'status': str,
            'data': TranscriptionData
        }

        self.attribute_map = {
            'id': 'id',
            'info': 'info',
            'status': 'status',
            'data': 'data'
        }

        self._id = id
        self._info = info
        self._status = status
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'JobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobResponse of this JobResponse.  # noqa: E501
        :rtype: JobResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this JobResponse.


        :return: The id of this JobResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this JobResponse.


        :param id: The id of this JobResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def info(self) -> JobInfo:
        """Gets the info of this JobResponse.


        :return: The info of this JobResponse.
        :rtype: JobInfo
        """
        return self._info

    @info.setter
    def info(self, info: JobInfo):
        """Sets the info of this JobResponse.


        :param info: The info of this JobResponse.
        :type info: JobInfo
        """

        self._info = info

    @property
    def status(self) -> str:
        """Gets the status of this JobResponse.


        :return: The status of this JobResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this JobResponse.


        :param status: The status of this JobResponse.
        :type status: str
        """
        allowed_values = ["pending", "running", "completed", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def data(self) -> TranscriptionData:
        """Gets the data of this JobResponse.


        :return: The data of this JobResponse.
        :rtype: TranscriptionData
        """
        return self._data

    @data.setter
    def data(self, data: TranscriptionData):
        """Sets the data of this JobResponse.


        :param data: The data of this JobResponse.
        :type data: TranscriptionData
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

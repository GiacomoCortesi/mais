from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.transcription_data import TranscriptionData
from openapi_server import util

from openapi_server.models.transcription_data import TranscriptionData  # noqa: E501

class TranscriptionPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data=None, job_id=None):  # noqa: E501
        """TranscriptionPostRequest - a model defined in OpenAPI

        :param data: The data of this TranscriptionPostRequest.  # noqa: E501
        :type data: TranscriptionData
        :param job_id: The job_id of this TranscriptionPostRequest.  # noqa: E501
        :type job_id: str
        """
        self.openapi_types = {
            'data': TranscriptionData,
            'job_id': str
        }

        self.attribute_map = {
            'data': 'data',
            'job_id': 'job_id'
        }

        self._data = data
        self._job_id = job_id

    @classmethod
    def from_dict(cls, dikt) -> 'TranscriptionPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _transcription_post_request of this TranscriptionPostRequest.  # noqa: E501
        :rtype: TranscriptionPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> TranscriptionData:
        """Gets the data of this TranscriptionPostRequest.


        :return: The data of this TranscriptionPostRequest.
        :rtype: TranscriptionData
        """
        return self._data

    @data.setter
    def data(self, data: TranscriptionData):
        """Sets the data of this TranscriptionPostRequest.


        :param data: The data of this TranscriptionPostRequest.
        :type data: TranscriptionData
        """

        self._data = data

    @property
    def job_id(self) -> str:
        """Gets the job_id of this TranscriptionPostRequest.


        :return: The job_id of this TranscriptionPostRequest.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this TranscriptionPostRequest.


        :param job_id: The job_id of this TranscriptionPostRequest.
        :type job_id: str
        """

        self._job_id = job_id

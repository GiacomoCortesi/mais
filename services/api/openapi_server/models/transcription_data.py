
from typing import List  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.segment import Segment
from openapi_server.models.word import Word
from openapi_server import util


class TranscriptionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, segments=None, word_segments=None, language=None):  # noqa: E501
        """TranscriptionData - a model defined in OpenAPI

        :param segments: The segments of this TranscriptionData.  # noqa: E501
        :type segments: List[Segment]
        :param word_segments: The word_segments of this TranscriptionData.  # noqa: E501
        :type word_segments: List[Word]
        :param language: The language of this TranscriptionData.  # noqa: E501
        :type language: str
        """
        self.openapi_types = {
            'segments': List[Segment],
            'word_segments': List[Word],
            'language': str
        }

        self.attribute_map = {
            'segments': 'segments',
            'word_segments': 'word_segments',
            'language': 'language'
        }

        self._segments = segments
        self._word_segments = word_segments
        self._language = language

    @classmethod
    def from_dict(cls, dikt) -> 'TranscriptionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TranscriptionData of this TranscriptionData.  # noqa: E501
        :rtype: TranscriptionData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def segments(self) -> List[Segment]:
        """Gets the segments of this TranscriptionData.


        :return: The segments of this TranscriptionData.
        :rtype: List[Segment]
        """
        return self._segments

    @segments.setter
    def segments(self, segments: List[Segment]):
        """Sets the segments of this TranscriptionData.


        :param segments: The segments of this TranscriptionData.
        :type segments: List[Segment]
        """
        if segments is None:
            raise ValueError("Invalid value for `segments`, must not be `None`")  # noqa: E501

        self._segments = segments

    @property
    def word_segments(self) -> List[Word]:
        """Gets the word_segments of this TranscriptionData.


        :return: The word_segments of this TranscriptionData.
        :rtype: List[Word]
        """
        return self._word_segments

    @word_segments.setter
    def word_segments(self, word_segments: List[Word]):
        """Sets the word_segments of this TranscriptionData.


        :param word_segments: The word_segments of this TranscriptionData.
        :type word_segments: List[Word]
        """

        self._word_segments = word_segments

    @property
    def language(self) -> str:
        """Gets the language of this TranscriptionData.


        :return: The language of this TranscriptionData.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this TranscriptionData.


        :param language: The language of this TranscriptionData.
        :type language: str
        """

        self._language = language

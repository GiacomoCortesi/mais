# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-01-19T16:25:28+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Literal, Optional

from pydantic import BaseModel, Field

class JobInfo(BaseModel):
    config: Optional[JobConfig] = None
    filename: Optional[str] = Field(None, title='filename')

class JobRequest(BaseModel):
    id: Optional[str] = Field(None, title='id')
    info: Optional[JobInfo] = None

class JobResponse(BaseModel):
    id: str = Field(..., title='id')
    info: JobInfo = None
    status: Status = Field(..., title='status')
    data: Optional[TranscriptionData] = Field(None, title='id')

class JobConfig(BaseModel):
    model_size: str = Field(..., title='model_size')
    subtitles_frequency: int = Field(..., title='subtitles_frequency')
    language: str = Field(..., title='language')
    speaker_detection: bool = Field(..., title='speaker_detection')

class Status(str, Enum):
    pending = 'pending'
    running = 'running'
    completed = 'completed'
    failed = 'failed'


class Word(BaseModel):
    word: str = Field("", title='word')
    start: Optional[float] = Field(0, title='start')
    end: Optional[float] = Field(0, title='end')
    score: Optional[float] = Field(0, title='score')


class Segment(BaseModel):
    start: float = Field(..., title='start')
    end: float = Field(..., title='end')
    text: str = Field(..., title='text')
    words: Optional[List[Word]] = Field(None, title='words')


class TranscriptionData(BaseModel):
    segments: List[Segment] = Field(..., title='segments')
    word_segments: Optional[List[Word]] = Field(None, title='word_segments')
    language: Optional[str] = Field(None, title='language')


class FileResponse(BaseModel):
    id: Optional[str] = Field(None, title='id')
    filename: Optional[str] = Field(None, title='filename')
    upload_date: Optional[datetime] = Field(None, title='upload_date')
    video_url: Optional[str] = Field(None, title='video_url')
    image_url: Optional[str] = Field(None, title='image_url')
    width: Optional[int] = Field(None, title="Width", description="Width of the video")
    height: Optional[int] = Field(None, title="Height", description="Height of the video")
    duration: Optional[float] = Field(None, title="Duration", description="Duration of the video")

class ErrorModel(BaseModel):
    title: Optional[str] = Field(None, title='title')
    detail: Optional[str] = Field(None, title='detail')
    status: Optional[int] = Field(None, title='status')
    type: Optional[str] = Field(None, title='type')


class FieldTranscriptionIdPatchRequest(BaseModel):
    data: Optional[TranscriptionData] = None


class FieldFilePostRequest(BaseModel):
    file: Optional[bytes] = None


class TranscriptionRequest(BaseModel):
    id: Optional[str] = Field(None, title='id')
    data: TranscriptionData = None
    job_id: Optional[str] = Field(None, title='job_id')
    filename: Optional[str] = Field(None, title='filename')
    subtitle_config: Optional[SubtitleConfig] = None
    
class TranscriptionResponse(BaseModel):
    id: str = Field(None, title='id')
    data: TranscriptionData = None
    job_id: str = Field(None, title='job_id')
    filename: str = Field(None, title='filename')
    original_data: TranscriptionData
    subtitle_config: Optional[SubtitleConfig] = None

class SubtitleConfig(BaseModel):
    position: int = Field(50, description="Position of the subtitle in % for bottom to top.")
    color: str = Field("#FFFFFF", pattern=r"^#[0-9A-Fa-f]{6}$", description="Hexadecimal color code for the subtitle.")
    size: int = Field("20", ge=0, le=150, description="Font size of the subtitle. Must be between 10 and 50.")
    font: str = Field('"Arial", sans-serif', description="Font family for the subtitle.")

class FieldTranscriptionPostRequest(BaseModel):
    schema_: Optional[TranscriptionRequest] = Field(None, alias='schema')
